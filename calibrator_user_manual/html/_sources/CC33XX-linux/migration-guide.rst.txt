***************
Migration Guide
***************

Developers will need to be able to port the CC33xx linux driver to their custom
hardware. This guide demonstrates how to patch the linux kernel with the CC33xx 
driver and configure the device tree for any linux host. 

Kernel Integration 
==================

The CC33xx driver supports linux kernel 6.1.xxx so it is assumed that the 
target hardware is capable of running the same version. The process to integrate 
the CC33xx driver is generic and can be applied to any embedded linux host. 

Patch Kernel with CC33xx Driver 
-------------------------------

The source code for the CC33xx driver are provided as patches, so the user will 
need to patch the kernel with the CC33xx driver. This can be done with the following commands:

1. Change directory to be in the top directory of the linux kernel source:

.. code-block:: bash

    $ cd <path_to_kernel_source>
    $ ls # Kernel version must be 6.1
    arch     crypto         init      kernel       mm       scripts   virt
    block    Documentation  io_uring  lib          net      security
    certs    drivers        ipc       LICENSES     README   sound
    COPYING  fs             Kbuild    MAINTAINERS  rust     tools
    CREDITS  include        Kconfig   Makefile     samples  usr

3. Execute the patch command:

.. code-block:: bash

    $ patch -p0 < <path_to_cc33xx_installation>/cc33xx/patches/cc33xx_kernel.patch

Kernel Configuration
--------------------

Edit the target's defconfig to disable WLCORE and enable CC33XX. 

.. code-block:: diff

    -CONFIG_WL18XX=m
    -CONFIG_WLCORE=m
    -CONFIG_WLCORE_SDIO=m
    +CONFIG_WL18XX=n
    +CONFIG_WLCORE=n
    +CONFIG_WLCORE_SDIO=n
    +CONFIG_CC33XX=m
    +CONFIG_CC33XX_SDIO=m
    +CONFIG_CC33XX_SPI=m
    +CONFIG_BT_TI=m
    +CONFIG_BT_TI_UART=m
    +CONFIG_BT_TI_SDIO=m
    +CONFIG_CFG80211=m
    +CONFIG_MAC80211=m

The kernel is now patched and can be built. Building will depending on the vendor and host, 
so as a reference see these `instructions for the AM335x 
<https://software-dl.ti.com/processor-sdk-linux/esd/AM335X/08_02_00_24/exports/
docs/linux/Foundational_Components_Kernel_Users_Guide.html#preparing-to-build>`_.

Device Tree Configuration
=================================

After patching the linux kernel with the CC33xx SDK, a full example device tree 
can be found at arch/arm/boot/dts/am335x-boneblack-cc33xx-boosterpack.dts. 

MMC/SDIO
--------

A snippet device tree for the CC33XX SDIO driver on AM335x is as follows. 

.. code-block:: text

    &mmc2 {
        status = "okay";
        vmmc-supply = <&wlan_en_reg>;
        bus-width = <4>;
        pinctrl-names = "default";
        pinctrl-0 = <&mmc2_pins &wlan_pins_default>;
        non-removable;
        cap-power-off-card;
        keep-power-in-suspend;

        #address-cells = <1>;
        #size-cells = <0>;
        wlcore: wlcore@0 {
            compatible = "ti,cc33xx";
            reg = <2>;
            interrupt-parent = <&gpio0>;
            interrupts = <7 IRQ_TYPE_LEVEL_HIGH>;
            irq-gpio = <&gpio0 7 GPIO_ACTIVE_HIGH>; 
        };
    };

    &am33xx_pinmux {
        wlan_pins_default: pinmux_wlan_pins_default {
            pinctrl-single,pins = <
                AM33XX_PADCONF(AM335X_PIN_SPI0_SCLK,         PIN_OUTPUT_PULLUP, MUX_MODE7)  /* gpio0_2 WL_EN*/
                AM33XX_PADCONF(AM335X_PIN_ECAP0_IN_PWM0_OUT, PIN_INPUT_PULLDOWN, MUX_MODE7) /* gpio0_7 WL_IRQ*/
            >;
        };

        mmc2_pins: pinmux_mmc2_pins {
            pinctrl-single,pins = <
                AM33XX_PADCONF(AM335X_PIN_GPMC_CSN1, PIN_INPUT_PULLUP, MUX_MODE2) /* gpmc_csn1.mmc1_clk */
                AM33XX_PADCONF(AM335X_PIN_GPMC_CSN2, PIN_INPUT_PULLUP, MUX_MODE2) /* gpmc_csn2.mmc1_cmd */
                AM33XX_PADCONF(AM335X_PIN_GPMC_AD0,  PIN_INPUT_PULLUP, MUX_MODE1) /* gpmc_ad0.mmc1_dat0 */
                AM33XX_PADCONF(AM335X_PIN_GPMC_AD1,  PIN_INPUT_PULLUP, MUX_MODE1) /* gpmc_ad1.mmc1_dat1 */
                AM33XX_PADCONF(AM335X_PIN_GPMC_AD2,  PIN_INPUT_PULLUP, MUX_MODE1) /* gpmc_ad2.mmc1_dat2 */
                AM33XX_PADCONF(AM335X_PIN_GPMC_AD3,  PIN_INPUT_PULLUP, MUX_MODE1) /* gpmc_ad3.mmc1_dat3 */
            >;
        };
    };

.. warning::
    Developers must be careful to not add an internal pullup to the WL_IRQ pin. The 
    WL_IRQ is a Sense-on-Power (SOP) pin and adding a internal pullup will change 
    the SOP mode of the CC33XX causing erratic behavior. It is advised to not add 
    any pull up or down directly on the WL_IRQ pin. 

In this example, the devicetree sets the interrupt pin to GPIO0_7. When viewing 
the kernel logs, the following line will be printed verifying IRQ over GPIO: 

.. code-block:: bash

    Using GPIO as IRQ

A vmmc supply is used to assert and deassert CC33xx's RESET pin. This pin must be 
configured as active high in the fixedregulator driver since the RESET pin is 
active low. 

.. code-block:: text

    wlan_en_reg: fixedregulator@1 {
        compatible = "regulator-fixed";
        regulator-name = "wlan-en-regulator";
        regulator-min-microvolt = <1800000>;
        regulator-max-microvolt = <1800000>;
        gpio = <&gpio0 2 GPIO_ACTIVE_HIGH>; 
        enable-active-high;
    };

UART
----

CC33xx uses UART specifically for BLE 5.3 communication. To configure BLE over UART, 
the bluetooth driver must be added to the UART driver in the devicetree. 
See the snippet below.

.. code-block:: text

    &uart1 { 
        // BLE host UART
        pinctrl-names = "default";
        pinctrl-0 = <&uart1_pins>;

        status = "okay";

        bluetooth {
            compatible = "ti,cc33xx-bt";
            cc33xx-supply = <&cc33xx_en_reg>;
            max-speed = <115200>;
        };
    };

Hostapd and Supplicant Integration
==================================

Developers will need to be able to add the wpa_supplicant and hostapd to their custom
solution. This guide demonstrates how to locate, configure and install this software to
the linux built.

Introduction
------------

*Wpa_supplicant* and *hostapd* are cross platform utilities that implements IEEE 802.11 Wi-Fi upper layers, 
including authentication, management, roaming and more. These utilities run in user space (e.g. for Linux), 
and designed to run as a "daemon" program in the background and acts as the backend component controlling the wireless connection. 
*Wpa_supplicant* for example supports separate frontend programs such as a text-based frontend (*wpa_cli*) and a GUI-based frontend (*wpa_gui*).

There are stable and official releases as well as intermediate release for developers that are usually marked as <version>-devel, e.g. *2.10-devel*. 
All releases can be found under `Hostapd releases <https://w1.fi/releases.html>`_. The latest stable release is v2.10.
The official repository can be found under `Hostapd repository <https://w1.fi/cgit/hostap/>`_.

There are two main dependencies for *Wpa_supplicant* and *hostapd*, OpenSSL and libnl.
 
*	The *libnl* suite is a collection of libraries providing APIs to netlink based Linux kernel interfaces. 
	Netlink is a socket-based IPC mechanism primarily between the kernel and user space processes.
*	*OpenSSL* is a cryptography toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1)
	network protocols and related cryptography standards required by them. The OpenSSL program is a command line tool for using 
	the various cryptography functions of OpenSSL's crypto library from the shell.

Installation
------------

The steps to compile and install the *hostapd* includes:

#.	Get the sources from the repository

.. code-block:: bash

    $ git clone https://w1.fi/hostap.git
    $ git checkout hostap_2_10
	
#.	Copy the *android.config* (or the *defconfig*) to *.config*
#.	Edit the *.config* with the appropriate settings:
	
	.. code-block:: diff

		+	CONFIG_DRIVER_NL80211=y
		+	# set according to the libnl library used (CONFIG_LIBNL20 or CONFIG_LIBNL32)
		+	CONFIG_LIBNL32=y
		+	CONFIG_OCV=y
		+	CONFIG_MBO=y
		+	CONFIG_IEEE80211R=y
		+	CONFIG_RADIUS_SERVER=y
		+	CONFIG_DRIVER_RADIUS_ACL=y
		+	CONFIG_EAP=y
		+	CONFIG_EAP_TLS=y
		+	CONFIG_EAP_PEAP=y
		+	CONFIG_EAP_TTLS=y
		+	CONFIG_SAE=y
		+	CONFIG_SUITEB=y
		+	CONFIG_SUITEB192=y
		+	NEED_HMAC_SHA384_KDF=y
		
#.	Cross-compile the sources and install the binaries to destination folder
#.	Copy the compiled binaries to */usr/sbin* directory on the DUT

	*	*hostapd*
	*	*hostapd_cli*
	
#.	Copy the configuration file hostapd.conf to the rootfs on the DUT, e.g. to */usr/share/cc33xx*
#.	When running the hostapd, make sure to point to the hostapd.conf file on the rootfs

.. code-block:: bash

    $ ./usr/sbin/hostapd /usr/share/cc33xx/hostapd.conf &
	
The steps to compile and install the *wpa_supplicant* includes:

#.	Get the sources from the repository

.. code-block:: bash

    $ git clone https://w1.fi/hostap.git
    $ git checkout hostap_2_10
	
#.	Copy the *android.config* (or the *defconfig*) to *.config*
#.	Edit the *.config* with the appropriate settings:
	
	.. code-block:: diff

		+	CONFIG_DRIVER_NL80211=y
		+	# set according to the libnl library used (CONFIG_LIBNL20 or CONFIG_LIBNL32)
		+	CONFIG_LIBNL32=y
		+	CONFIG_SAE=y
		+	CONFIG_SUITEB=y
		+	CONFIG_SUITEB192=y
		+	NEED_HMAC_SHA384_KDF=y
		+	CONFIG_IEEE80211R=y
		+	CONFIG_MESH=y
		+	CONFIG_HT_OVERRIDES=y
		+	CONFIG_HE_OVERRIDES=y
		+	CONFIG_MBO=y
		+	NEED_BGSCAN=y
		+	CONFIG_BGSCAN_LEARN=y
		+	CONFIG_BGSCAN_SIMPLE=y

#.	Cross-compile the sources and install the binaries to destination folder
#.	Copy the compiled binaries to */usr/sbin* directory on the DUT

	*	*wpa_supplicant*
	*	*wpa_cli*	
	*	*wpa_passphrase*
	
#.	Copy the configuration file wpa_supplicant.conf to the rootfs on the DUT, e.g. to */usr/share/cc33xx*
#.	When running the wpa_supplicant, make sure to point to the wpa_supplicant.conf file on the rootfs

.. code-block:: bash

    $ ./usr/sbin/wpa_supplicant -e/usr/share/cc33xx/entropy.bin -iwlan0 -Dnl80211 -c/usr/share/cc33xx/wpa_supplicant.conf &	

Important notes
---------------

Special case needs to be taken to the fact that the kernel needs to aligned with the *hostapd*/*wpa_supplicant*. 
The file on each side that reflects this alignment is related to nl80211 layer.

*	**hostapd**/**wpa_supplicant**: *nl80211_copy.h* header file, under ./src/drivers/
*	**kernel**: *nl80211.h* header file, under ./include/uapi/linux/

.. note::
	It is important to check that the *nl80211_attrs* and *nl80211_commands* are aligned between the two nl80211 header files. Misalignment may cause unexpected behavior.

.. note::	
	It is usually OK to use an older *hostapd*/*wpa_supplicant* with new kernel where only a subset of the commands and attributes 
	are used but vice versa may impose issues. If new *hostapd*/*wpa_supplicant* is used with older kernel, some features that are supported in 
	*hostapd*/*wpa_supplicant* may not be supported by the kernel, hence manual addition of these kernel features may be required.
	
Install Firmware
========================

It is necessary to ensure that the firmware files are also included in the linux 
filesystem. The files cc33xx_fw.bin, cc33xx_2nd_loader.bin, and cc33xx-conf.bin 
must be added to the target's directory: /lib/firmware/ti-connectivity/. These 
binaries can be found in ``<SDK_INSTALL_PATH>/cc33xx/cc33xx_rootfs/lib/firmware/ti-connectivity/``.

WLAN Bring-up
=============

If everything has been configured correctly, then on power up the following 
kernel logs will be printed. 

.. code-block:: bash

    [   14.201530] cc33xx_sdio mmc1:0001:2: Using GPIO as IRQ
    [   21.744167] wlcore: cc33xx_probe :: Start
    [   21.753254] wlcore: Wireless Driver Version 1.6.0.5
    [   22.204103] wlcore: Downloading ti-connectivity/cc33xx_2nd_loader.bin to device
    [   22.403136] wlcore: ti-connectivity/cc33xx_2nd_loader.bin loaded successfully
    [   22.403175] wlcore: Downloading ti-connectivity/cc33xx_fw.bin to device
    [   24.056708] wlcore: ti-connectivity/cc33xx_fw.bin loaded successfully
    [   24.060293] wlcore: loaded
    [   24.123559] wlcore: Wireless Firmware Version 1.6.0.12
    [   24.123559] wlcore: Wireless Phy Version 1.2.26.5.24.64

Optional Configurations
=======================

SDIO In-band Interrupt
----------------------

The device tree can be modified to enable interrupts over the SDIO bus rather 
than using a separate GPIO pin reducing the total number of pins used by the host. 
To enable SDIO in-band interrupts, simply remove the interrupts from the wlcore block. 
Here is an example:

.. code-block:: text

	wlcore: wlcore@2 {
		compatible = "ti,cc33xx";
		reg = <2>;
	};

If configured correctly, the kernel will print out the following log: 

.. code-block:: bash

    Using SDIO inband IRQ


BLE over SDIO
-------------

Enabling BLE over SDIO, also known as Shared SDIO, is a matter of concatenating the 
CC33xx BLE driver. However, a pre-requirement is that in-band IRQ must also be used. 
Here is an example of an entire MMC instance with BLE over SDIO enabled:

.. code-block:: text

    &mmc {
        status = "okay";
        vmmc-supply = <&wlan_en_reg>;
        bus-width = <4>;
        pinctrl-names = "default", "sleep";
        pinctrl-0 = <&mmc2_pins>;
        pinctrl-1 = <&mmc2_pins_sleep>;
        non-removable;
        cap-power-off-card;
        keep-power-in-suspend;

        #address-cells = <1>;
        #size-cells = <0>;
        wlcore: wlcore@0 {
            compatible = "ti,cc33xx";
            reg = <2>;
        };

        // TI-BLE-SDIO interface
        btti: btti@1 {
            compatible = "ti,cc33xxbt";
            reg = <1>;
        };
    };

SPI
---

There is support for the CC33xx Linux driver to be used over SPI instead of SDIO. 
The following is an sample DTS snippet for using the CC33XX SPI driver on AM335x:

.. code-block:: text

    &spi0 {
        status = "okay";
        pinctrl-names = "default";
        pinctrl-0 = <&spi0_pins &wlan_pins_default>;
        ti,pindir-d0-out-d1-in = <1>;
        
        wlcore: wlcore@0 {
            compatible = "ti,cc33xx";
            reg = <0>;
            spi-max-frequency = <5000000>;
            interrupt-parent = <&gpio0>;
            interrupts = <7 IRQ_TYPE_LEVEL_HIGH>;
            vwlan-supply = <&cc33xx_en_reg>;
        };
    };

    &am33xx_pinmux {
        spi0_pins: pinmux_spi0_pins {
            pinctrl-single,pins = <
                AM33XX_PADCONF(AM335X_PIN_SPI0_SCLK, PIN_INPUT,         MUX_MODE0)
                AM33XX_PADCONF(AM335X_PIN_SPI0_D0,   PIN_OUTPUT,        MUX_MODE0)
                AM33XX_PADCONF(AM335X_PIN_SPI0_D1,   PIN_INPUT_PULLUP,  MUX_MODE0)
                AM33XX_PADCONF(AM335X_PIN_SPI0_CS0,  PIN_OUTPUT,        MUX_MODE0)
            >;
        };

        wlan_pins_default: pinmux_wlan_pins_default {
            pinctrl-single,pins = <
                AM33XX_PADCONF(AM335X_PIN_LCD_DATA15,        PIN_OUTPUT_PULLUP, MUX_MODE7)  /* gpio0_11 WL_EN*/
                AM33XX_PADCONF(AM335X_PIN_ECAP0_IN_PWM0_OUT, PIN_INPUT_PULLDOWN, MUX_MODE7) /* gpio0_7 WL_IRQ*/
            >;
        };
    };
